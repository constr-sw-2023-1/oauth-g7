{
  "openapi": "3.0.2",
  "info": {
    "title": "Oauth-7 - OpenAPI 3.0",
    "description": "The Keycloak authentication API is an identity and access management solution that allows user authentication and authorization in applications. This API provides endpoints for access token generation, token renewal, token validation, as well as endpoints for user creation and management in the system. Swagger can be used to document these endpoints and their parameters, specify the expected responses, and detail the API's security policies, such as the supported authentication schemes and permissions required to access certain endpoints. The documentation generated by Swagger facilitates integration with the Keycloak API, enabling developers to better understand how the API works and use it more efficiently and securely.",
    "contact": {
      "email": "brunoramos013@gmail.com"
    },
    "version": "v0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication OpenID Connect"
    },
    {
      "name": "User",
      "description": "Get User Information"
    },
    {
      "name": "Users Management",
      "description": "Manage tokens in the realm"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with OpenID Connect",
        "description": "Logs in to the system using OpenID Connect credentials.\n\n",
        "operationId": "login",
        "requestBody": {
          "required": true,
          "description": "OpenID Connect credentials.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "client_secret"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully Generated Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users Management"
        ],
        "summary": "Create User",
        "description": " Create a new user in the realm.",
        "operationId": "createUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Credentials"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "User already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "Get a list of users in the realm.",
        "operationId": "listUsers",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Token"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User By ID",
        "description": "",
        "operationId": "getUserByID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID that needs to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Listed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Invalid Token "
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users Management"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the realm.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Updated"
          },
          "401": {
            "description": "Invalid Token"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users Management"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Insert the ID of the user that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted"
          },
          "401": {
            "description": "Invalid Token"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/reset-password/{id}": {
      "put": {
        "tags": [
          "Users Management"
        ],
        "summary": "Reset Password",
        "description": "This can only be done by the logged in user.",
        "operationId": "resetPassword",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user that needs to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "The new password"
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password Updated"
          },
          "400": {
            "description": "Failed to update password"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Auth": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "string",
            "example": "Sucessfully authenticated"
          },
          "token_type": {
            "type": "string",
            "example": "Bearer"
          },
          "access_token": {
            "type": "string",
            "example": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJfX1I1d2tQanRsZUhfZ2JaNnFlQzV1dGJlc093N3E2ZzViQ19DVWNkN3Y0In0.eyJleHAiOjE2ODIzNjA3MTQsImlhdCI6MTY4MjM2MDQxNCwianRpIjoiODdiOWQ2MDItOTMxOC00NzgyLWE2ZTMtZjg0ODQzZjFkMWYzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDkwL2F1dGgvcmVhbG1zL2NvbnN0ci1zdy0yMDIzLTEiLCJhdWQiOlsicmVhbG0tbWFuYWdlbWVudCIsImFjY291bnQiXSwic3ViIjoiMDVlOTcwNzgtZDgwZC00NmZkLTgwN2ItZjllNzIwZTliM2RmIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiZ3J1cG83Iiwic2Vzc2lvbl9zdGF0ZSI6ImRjMzEzNTJhLTNiNmMtNGM2ZC04OWJlLTc5YjRiM2Y1OGExNCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cDovL2xvY2FsaG9zdDozMDAwIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLWNvbnN0ci1zdy0yMDIzLTEiLCJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LXVzZXJzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIiwicXVlcnktdXNlcnMiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsInNpZCI6ImRjMzEzNTJhLTNiNmMtNGM2ZC04OWJlLTc5YjRiM2Y1OGExNCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ3J1cG83In0.QMquuDGAOW5YyMDb256U1H19ek50cs8R6gmn2OJkWMc7SSrG-ScyTNl02blpD1X6gqAdAanQzC_BtcecA40aaPLHSIiraR8jy3Xex_gzx1lX04lhPYEyCE7OrcLO78zXbBF7tTDCwatekXuoWNX893ed-qaGjh3tF4Ucu3qSu2fEdbdLehnCpQQmSTH8t4NQbJdalR0R91mmYr3Yq26AlRkEwnS3cPMAzxqJ-4HqwelRmHcew3TiiTsJapiL498wj8QyqCvxeLuQSaW1CZSNOOinjotYlvRa3IbA-8DxX0i1hNBAcU2Sk_EVRjHbCwYKLr_9UvbRBtJUyWQvgH-j3g"
          },
          "expires_in": {
            "type": "number",
            "example": "300"
          },
          "refresh_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJiOGYxOTllZS0wZTI0LTQ5YjEtOGVjMi1iYmRkNmU1MWJlYWUifQ.eyJleHAiOjE2ODIzNjIyMTQsImlhdCI6MTY4MjM2MDQxNCwianRpIjoiNjBlZjlkMTMtMjdiZi00N2UyLWJkZDctYjU5OWZkNGMxZTAwIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDkwL2F1dGgvcmVhbG1zL2NvbnN0ci1zdy0yMDIzLTEiLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwOTAvYXV0aC9yZWFsbXMvY29uc3RyLXN3LTIwMjMtMSIsInN1YiI6IjA1ZTk3MDc4LWQ4MGQtNDZmZC04MDdiLWY5ZTcyMGU5YjNkZiIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJncnVwbzciLCJzZXNzaW9uX3N0YXRlIjoiZGMzMTM1MmEtM2I2Yy00YzZkLTg5YmUtNzliNGIzZjU4YTE0Iiwic2NvcGUiOiJlbWFpbCBwcm9maWxlIiwic2lkIjoiZGMzMTM1MmEtM2I2Yy00YzZkLTg5YmUtNzliNGIzZjU4YTE0In0._euUIgwRiOQ42yeZP9vdT45_V3n3CBhXP2tg0d027Y4"
          },
          "refresh_expires_in": {
            "type": "number",
            "example": "1800"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdTimestamp": {
            "type": "number"
          },
          "username": {
            "type": "string",
            "required": true
          },
          "enabled": {
            "type": "boolean"
          },
          "totp": {
            "type": "boolean"
          },
          "emailVerified": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string",
            "default": ""
          },
          "lastName": {
            "type": "string",
            "default": ""
          },
          "email": {
            "type": "string",
            "default": ""
          },
          "disableableCredentialTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "requiredActions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notBefore": {
            "type": "number"
          },
          "access": {
            "type": "object",
            "properties": {
              "manageGroupMembership": {
                "type": "boolean"
              },
              "view": {
                "type": "boolean"
              },
              "mapRoles": {
                "type": "boolean"
              },
              "impersonate": {
                "type": "boolean"
              },
              "manage": {
                "type": "boolean"
              }
            }
          },
          "realmRoles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}